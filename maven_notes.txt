Maven环境变量
1、windows
	MAVEN_HOME D:\AppServer\apache-maven\apache-maven-3.1.1
	MAVEN %MAVEN_HOME%\bin
	MAVEN_OPTS -Xms256m -Xmx512m

groupId：定义当前项目隶属于某个组织
artifactId：定义项目模块名
version：定义项目当前的版本号
packaging：定义项目打包方式，如：jar, war, javadoc, ...
classifier：定义构建输出的一些附属组件。如：jdk5, jdk6
项目构建的文件名规则是：artifactId-version[-classifier].packaging

Maven声明周期介绍，详细参考官方介绍
http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

1、clean生命周期
1) pre-clean 执行一些清理前需要完成的工作
2) clean 清理上一次构建生成的文件
3) post-clean 执行一些清理后需要完成的工作

2、default生命周期
1) validate
2) initialize
3) generate-sources
4) process-sources 处理项目资源文件。一般来说，是对src/main/resources目录的内容进行变量替换等工作后，复制到项目输出的住classpath目录中。
5) generate-resources
6) process-resources
7) compile 编译项目的主源码。一般来说，是编译src/main/java目录下的java文件至项目输出的主classpath目录中。
8) process-classes
9) generate-test-sources
10) process-test-sources 处理项目测试资源文件。一般来说，是对src/test/resources目录的内容进行变量替换等工作后，复制到项目输出的测试classpath目录中。
11) generate-test-resources
12) process-test-resources
13) test-compile 编译项目的测试代码。一般来说，是编译src/test/java目录下的java文件至项目输出的测试classpath目录中。
14) process-test-classes
15) test 使用单元测试框架运行测试，测试代码不会打包或部署。
16) prepare-package
17) package 打包成相应的格式，如：jar, war, ...
18) pre-integration-test
19) integration-test
20) post-integration-test
21) verify
22) install 将包安装到Maven本地仓库，供本地其它Maven项目使用
23) deploy 将最终的包复制到远程仓库，供其他开发人员和Maven项目使用。

3、site生命周期
1) pre-site 执行一些在生成项目站点之前需要完成的工作。
2) site 生成项目站点文档
3) post-site 执行一些在生成项目站点之后需要完成的工作。
4) site-deploy 将生成的项目站点发布到服务器上。

Maven命令，解释其执行的生命周期阶段，常用命令实际都是基于这些简单组合而成的。
mvn clean：调用clean生命周期的clean阶段，实际执行的阶段为pre-clean和clean
mvn post-clean：调用clean生命周期的post-clean阶段，实际执行的阶段为pre-clean，clean和post-clean
mvn test：调用default生命周期的test阶段。实际执行的阶段为default生命周期的validate、initialize等，直到test的所有阶段。
mvn clean install：调用clean生命周期的pre-clean、clean阶段，以及default生命周期的从validate至install的所有阶段。该命令结合了两个生命周期，在执行真正的项目构建之前清理项目是个很好的实践。
mvn clean deploy site-deploy：调用clean生命周期的pre-clean、clean阶段，default生命周期的所有阶段，以及site生命周期的所有阶段。该命令结合了Maven所有三个生命周期。


http://maven.apache.org/plugins/index.html
Maven在核心为一些主要的生命周期阶段绑定了很多插件的目标，当用户通过命令行调用生命周期阶段的时候，对应的插件目标就会执行相应的任务。
生命周期阶段	       插件目标                             
clean			       maven-clean-plugin:clean             删除项目的输出目录
site			       maven-site-plugin:site               用来生成项目站点
site-deploy			   maven-site-plugin:deploy             用来将项目站点部署到远程服务器上
process-resources      maven-resources-plugin:resources     复制主资源文件至主输出目录
compile                maven-compiler-plugin:compile        编译主代码至主输出目录
process-test-resources maven-resources-plugin:testResources 复制测试资源文件至测试输出目录
test-compile           maven-compiler-plugin:testCompile    编译测试代码至测试输出目录
test                   maven-surefire-plugin:test           执行测试用例
package                maven-jar-plugin:jar                 创建项目jar包
install                maven-install-plugin:install         将项目输出构件安装到本地仓库
deploy                 maven-deploy-plugin:deploy           将项目输出构件部署到远程仓库
以上只列出了拥有插件绑定关系的阶段，default生命周期还有很多其它阶段，默认它们没有绑定任何插件，因此也没有任何实际行为，一切以实际插件输出信息为准，多观察输出的log信息。

这是mvn搭配命令输出的几种格式，可进行按需组合使用
1) mvn <plugin-prefix>:<goal>
	example: mvn resources:resources
2) mvn <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>
	example: mvn org.apache.maven.plugins:maven-resources-plugin:2.6:resources
3) mvn <Available lifecycle phases>
	example: mvn process-resources
You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy.


mvn dependency:tree 查看依赖关系
mvn dependency:analyze 依赖关系分析

Eclipse IDE
  mvn eclipse:eclipse
  mvn eclipse:clean
  mvn eclipse:clean eclipse:eclipse

jetty
  mvn jetty:run
  mvnDebug jetty:run


将项目生成的构建部署至远程仓库中
1）、在settings.xml中配置远程仓库的认证信息，id要和pom.xml中deploy的地址一致。
    <server>
      <id>nexus-releases</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
    <server>
      <id>nexus-snapshots</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
2）、项目pom.xml中添加如下配置
<distributionManagement>
	<repository>
		<id>nexus-releases</id>
		<name>Local Nexus Repository</name>
		<url>http://localhost:8081/nexus/content/repositories/central</url>
	</repository>
	<snapshotRepository>
		<id>nexus-snapshots</id>
		<name>Local Nexus Repository</name>
		<url>http://localhost:8081/nexus/content/repositories/snapshots</url>
	</snapshotRepository>
</distributionManagement>
3）、配置正确后，在命令行运行mvn clean deploy


镜像，匹配<mirrorOf>的值请求都会转至该镜像，常见的用法是结合私服，由私服代理多个仓库，这样一来
对于组织内部的Maven用户来说，使用一个私服地址就等于使用了所有需要的外部仓库，除非镜像服务挂了。
    <mirror>
      <id>nexus-proxy</id>
      <mirrorOf>*</mirrorOf>
      <name>Human Readable Name for this Mirror.</name>
      <url>http://localhost:8081/nexus/content/groups/public/</url>
    </mirror>